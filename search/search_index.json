{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"InvenTree - Intuitive Inventory Management \u2693 InvenTree is an open-source inventory management system which provides intuitive parts management and stock control. InvenTree is designed to be lightweight and easy to use for SME or hobbyist applications, where many existing stock management solutions are bloated and cumbersome to use. However, powerful business logic works in the background to ensure that stock tracking history is maintained, and users have ready access to stock level information. How it Works \u2693 InvenTree is a Python and Django application which stores data in a relational database, and serves this data to the user(s) via a web browser, and (optionally) can be integrated into custom applications via an API. InvenTree is designed to allow for a flexible installation. You could run the InvenTree server on Raspberry Pi SBC and have a simple single-user setup with a lightweight sqlite database. Or it can be run on the \"cloud\" using MySQL or PostgreSQL and support multiple simultaneous users. Features \u2693 Organize Parts \u2693 Parts are the fundemental element of any inventory. InvenTree groups parts into structured categories which allow you to arrange parts to meet your particular needs. Read more... Manage Suppliers \u2693 Link parts to multiple suppliers, Read more... Instant Stock Knowledge \u2693 Instantly view current stock for a certain part, in a particular location, or required for an individual build. Stock items are organized in cascading locations and sub-locations, allowing flexible inspection of stock under any location. Stock items can be serialized for tracking of individual items, and test results can be stored against a serialized stock item for the purpose of acceptance testing and commissioning. Read more... BOM Management \u2693 Intelligent BOM (Bill of Material) management provides a clear understanding of the sub-parts required to make a new part. Read more... Build Parts \u2693 Consume stock items to make new parts Read more... Report \u2693 Generate a wide range of reports using custom templates. Read more... Extend and Customize \u2693 InvenTree is designed to be highly extensible. If the core InvenTree functionality does not meet your particular need, InvenTree provides a RESTful API, a native Python library, and a powerful plugin system. Read more... Getting Started \u2693 Refer to the installation guide for instructions on installing InvenTree. The server where InvenTree is to be installed will need to meet some basic package requirements, and a certain level of system administration understanding is assumed.","title":"Home"},{"location":"#inventree-intuitive-inventory-management","text":"InvenTree is an open-source inventory management system which provides intuitive parts management and stock control. InvenTree is designed to be lightweight and easy to use for SME or hobbyist applications, where many existing stock management solutions are bloated and cumbersome to use. However, powerful business logic works in the background to ensure that stock tracking history is maintained, and users have ready access to stock level information.","title":"InvenTree - Intuitive Inventory Management"},{"location":"#how-it-works","text":"InvenTree is a Python and Django application which stores data in a relational database, and serves this data to the user(s) via a web browser, and (optionally) can be integrated into custom applications via an API. InvenTree is designed to allow for a flexible installation. You could run the InvenTree server on Raspberry Pi SBC and have a simple single-user setup with a lightweight sqlite database. Or it can be run on the \"cloud\" using MySQL or PostgreSQL and support multiple simultaneous users.","title":"How it Works"},{"location":"#features","text":"","title":"Features"},{"location":"#organize-parts","text":"Parts are the fundemental element of any inventory. InvenTree groups parts into structured categories which allow you to arrange parts to meet your particular needs. Read more...","title":"Organize Parts"},{"location":"#manage-suppliers","text":"Link parts to multiple suppliers, Read more...","title":"Manage Suppliers"},{"location":"#instant-stock-knowledge","text":"Instantly view current stock for a certain part, in a particular location, or required for an individual build. Stock items are organized in cascading locations and sub-locations, allowing flexible inspection of stock under any location. Stock items can be serialized for tracking of individual items, and test results can be stored against a serialized stock item for the purpose of acceptance testing and commissioning. Read more...","title":"Instant Stock Knowledge"},{"location":"#bom-management","text":"Intelligent BOM (Bill of Material) management provides a clear understanding of the sub-parts required to make a new part. Read more...","title":"BOM Management"},{"location":"#build-parts","text":"Consume stock items to make new parts Read more...","title":"Build Parts"},{"location":"#report","text":"Generate a wide range of reports using custom templates. Read more...","title":"Report"},{"location":"#extend-and-customize","text":"InvenTree is designed to be highly extensible. If the core InvenTree functionality does not meet your particular need, InvenTree provides a RESTful API, a native Python library, and a powerful plugin system. Read more...","title":"Extend and Customize"},{"location":"#getting-started","text":"Refer to the installation guide for instructions on installing InvenTree. The server where InvenTree is to be installed will need to meet some basic package requirements, and a certain level of system administration understanding is assumed.","title":"Getting Started"},{"location":"contribute/","text":"Contribute to InvenTree \u2693 InvenTree is an open source project, and benefits greatly from user contributions. If you find InvenTree to be useful, and wish to improve the software, please consider contributing: Source Code \u2693 InvenTree is built using Python3 and Django . Source code is available on GitHub . Contributions towards the core InvenTree code base are welcomed; either extending current functionality, prodiving new features, or addressing outstanding issues. Report Bugs \u2693 If you find a bug or a feature that does not work correctly, please report it on GitHub . Reporting bugs is critical to improving the software. If you are able and willing, providing a fix for any outstanding issues would be greatly appreciated. Translation \u2693 InvenTree provides a translation layer for the web interface, this requires effort from translators to provide multi-lingual support. If you wish to translate InvenTree to a new language (or improve an existing translation), such contributions would be extremely useful. To provide translation improvements, refer to GitHub . Translation Helper Script A python script is provided to assist with translation. This script is located at ./InvenTree/script/translate.py Documentation \u2693 Documenting a large software project is a challenging and ongoing effort. If you are able to provide assistance in improving this documentation set, please consider doing so! Documentation contributions can be made on GitHub . Donate \u2693 If you are unable to provide contributions as listed above, or you find InvenTree to be useful, please consider donating to support its ongoing development.","title":"Contribute"},{"location":"contribute/#contribute-to-inventree","text":"InvenTree is an open source project, and benefits greatly from user contributions. If you find InvenTree to be useful, and wish to improve the software, please consider contributing:","title":"Contribute to InvenTree"},{"location":"contribute/#source-code","text":"InvenTree is built using Python3 and Django . Source code is available on GitHub . Contributions towards the core InvenTree code base are welcomed; either extending current functionality, prodiving new features, or addressing outstanding issues.","title":"Source Code"},{"location":"contribute/#report-bugs","text":"If you find a bug or a feature that does not work correctly, please report it on GitHub . Reporting bugs is critical to improving the software. If you are able and willing, providing a fix for any outstanding issues would be greatly appreciated.","title":"Report Bugs"},{"location":"contribute/#translation","text":"InvenTree provides a translation layer for the web interface, this requires effort from translators to provide multi-lingual support. If you wish to translate InvenTree to a new language (or improve an existing translation), such contributions would be extremely useful. To provide translation improvements, refer to GitHub . Translation Helper Script A python script is provided to assist with translation. This script is located at ./InvenTree/script/translate.py","title":"Translation"},{"location":"contribute/#documentation","text":"Documenting a large software project is a challenging and ongoing effort. If you are able to provide assistance in improving this documentation set, please consider doing so! Documentation contributions can be made on GitHub .","title":"Documentation"},{"location":"contribute/#donate","text":"If you are unable to provide contributions as listed above, or you find InvenTree to be useful, please consider donating to support its ongoing development.","title":"Donate"},{"location":"admin/admin/","text":"Admin Interface \u2693 Users which have administrator privileges have access to an Admin interface which provides extremely low level control of the database. Every item in the database is available and this interface provides a convenient option for directly viewing and modifying database objects. Caution Admin users should exercise extreme care when modifying data via the admin interface, as performing the wrong action may have unintended consequences! Access Admin Interface \u2693 To access the admin interface, select the \"Admin\" option from the drop-down user menu in the top-right corner of the screen. You will be presented with an adminstation panel as shown below: View Database Objects \u2693 Database objects can be listed and filtered directly. The image below shows an example of displaying existing part categories. Filtering \u2693 Some admin views support filtering of results against specified criteria. For example, the list of Part objects can be filtered as follows: Edit Database Objects \u2693 Individual database objects can be edited directly in the admin interface. The image below shows an exmple of editing a Part object:","title":"Admin Interface"},{"location":"admin/admin/#admin-interface","text":"Users which have administrator privileges have access to an Admin interface which provides extremely low level control of the database. Every item in the database is available and this interface provides a convenient option for directly viewing and modifying database objects. Caution Admin users should exercise extreme care when modifying data via the admin interface, as performing the wrong action may have unintended consequences!","title":"Admin Interface"},{"location":"admin/admin/#access-admin-interface","text":"To access the admin interface, select the \"Admin\" option from the drop-down user menu in the top-right corner of the screen. You will be presented with an adminstation panel as shown below:","title":"Access Admin Interface"},{"location":"admin/admin/#view-database-objects","text":"Database objects can be listed and filtered directly. The image below shows an example of displaying existing part categories.","title":"View Database Objects"},{"location":"admin/admin/#filtering","text":"Some admin views support filtering of results against specified criteria. For example, the list of Part objects can be filtered as follows:","title":"Filtering"},{"location":"admin/admin/#edit-database-objects","text":"Individual database objects can be edited directly in the admin interface. The image below shows an exmple of editing a Part object:","title":"Edit Database Objects"},{"location":"admin/export/","text":"Exporting Data \u2693 The Admin Interface provides powerful data exporting capability. When displaying a list of items which support exporting (e.g. Part objects), select the \"Export\" button from the top-right corner: Multiple data formats are supported for exported data:","title":"Export Data"},{"location":"admin/export/#exporting-data","text":"The Admin Interface provides powerful data exporting capability. When displaying a list of items which support exporting (e.g. Part objects), select the \"Export\" button from the top-right corner: Multiple data formats are supported for exported data:","title":"Exporting Data"},{"location":"admin/import/","text":"Importing Data \u2693 TODO This section requires further work","title":"Import Data"},{"location":"admin/import/#importing-data","text":"TODO This section requires further work","title":"Importing Data"},{"location":"build/bom/","text":"Bill of Materials \u2693 A Bill of Materials (BOM) defines the list of component parts required to make an assembly. TODO This section requires further work","title":"BOM"},{"location":"build/bom/#bill-of-materials","text":"A Bill of Materials (BOM) defines the list of component parts required to make an assembly. TODO This section requires further work","title":"Bill of Materials"},{"location":"build/build/","text":"Building Parts \u2693 TODO This section requires further work","title":"Build Parts"},{"location":"build/build/#building-parts","text":"TODO This section requires further work","title":"Building Parts"},{"location":"buy/po/","text":"Purchase Orders \u2693 TODO This section requires further work Line Items \u2693 TODO This section requires further work","title":"Purchase Orders"},{"location":"buy/po/#purchase-orders","text":"TODO This section requires further work","title":"Purchase Orders"},{"location":"buy/po/#line-items","text":"TODO This section requires further work","title":"Line Items"},{"location":"buy/supplier/","text":"Suppliers \u2693 A supplier is an external vendor of parts and raw materials. TODO This section requires further work Supplier Parts \u2693 TODO This section requires further work","title":"Suppliers"},{"location":"buy/supplier/#suppliers","text":"A supplier is an external vendor of parts and raw materials. TODO This section requires further work","title":"Suppliers"},{"location":"buy/supplier/#supplier-parts","text":"TODO This section requires further work","title":"Supplier Parts"},{"location":"extend/api/","text":"InvenTree API \u2693 InvenTree provides a powerful REST API for interacting with inventory data on the server. Low-level data access and manipulation is available, with integrated user authentication and data validation Documentation \u2693 The API is self-documenting, and the documentation is provided alongside any InvenTree installation instance. If (for example) you have an InvenTree instance running at http://127.0.0.1:8000 then the API documentation is available at http://127.0.0.1:8000/api-doc/ Authentication \u2693 The API uses token-based authentication for fast data access. To obtain a valid token, perform a GET request to /api/user/token/ (no data are required). Credentials Ensure that a valid username:password combination are supplied as basic authorization headers. If the supplied user credentials are validated, the server will respond with: HTTP_200_OK { token: \"usertokendatastring\", } After reception of a valid authentication token, it can be subsequently used to perform token-based authentication.","title":"API"},{"location":"extend/api/#inventree-api","text":"InvenTree provides a powerful REST API for interacting with inventory data on the server. Low-level data access and manipulation is available, with integrated user authentication and data validation","title":"InvenTree API"},{"location":"extend/api/#documentation","text":"The API is self-documenting, and the documentation is provided alongside any InvenTree installation instance. If (for example) you have an InvenTree instance running at http://127.0.0.1:8000 then the API documentation is available at http://127.0.0.1:8000/api-doc/","title":"Documentation"},{"location":"extend/api/#authentication","text":"The API uses token-based authentication for fast data access. To obtain a valid token, perform a GET request to /api/user/token/ (no data are required). Credentials Ensure that a valid username:password combination are supplied as basic authorization headers. If the supplied user credentials are validated, the server will respond with: HTTP_200_OK { token: \"usertokendatastring\", } After reception of a valid authentication token, it can be subsequently used to perform token-based authentication.","title":"Authentication"},{"location":"extend/integrate/","text":"Third Party Integrations \u2693 A list of known third-party InvenTree extensions is provided below. If you have an extension that should be listed here, contact the InvenTree team on GitHub . Ki-nTree \u2693 Ki-nTree is a fantastic tool for automated creation of KiCad library parts, with direct integration with InvenTree. inventree-docker \u2693 inventree-docker provides Docker support for InvenTree","title":"Third-Party"},{"location":"extend/integrate/#third-party-integrations","text":"A list of known third-party InvenTree extensions is provided below. If you have an extension that should be listed here, contact the InvenTree team on GitHub .","title":"Third Party Integrations"},{"location":"extend/integrate/#ki-ntree","text":"Ki-nTree is a fantastic tool for automated creation of KiCad library parts, with direct integration with InvenTree.","title":"Ki-nTree"},{"location":"extend/integrate/#inventree-docker","text":"inventree-docker provides Docker support for InvenTree","title":"inventree-docker"},{"location":"extend/plugins/","text":"InvenTree Plugin Architecture \u2693 The InvenTree server code supports an extensible plugin architecture, allowing custom plugins to be integrated directly into the database server. This allows development of complex behaviours which are decoupled from core InvenTree code. InvenTree plugins are located in the directory ./InvenTree/plugins/ . Plugins are discovered and loaded when the server is started. Multiple plugins are supported: Reporting Plugins \u2693 InvenTree can generate customized reports (for example stocktake information, packing lists, acceptance test reports, etc). The reporting interface is extremely versatile, allowing the generation of reports in multiple formats (PDF / LaTeX / etc). TODO Include more information here on reporting plugins Barcode Plugins \u2693 InvenTree supports decoding of arbitrary barcode data via a Barcode Plugin interface. Barcode data POSTed to the /api/barcode/ endpoint will be supplied to all loaded barcode plugins, and the first plugin to successfully interpret the barcode data will return a response to the client. InvenTree can generate native QR codes to represent database objects (e.g. a single StockItem). This barcode can then be used to perform quick lookup of a stock item or location in the database. A client application (for example the InvenTree mobile app) scans a barcode, and sends the barcode data to the InvenTree server. The server then uses the InvenTreeBarcodePlugin (found at /InvenTree/plugins/barcode/inventree.py ) to decode the supplied barcode data. Any third-party barcodes can be decoded by writing a matching plugin to decode the barcode data. These plugins could then perform a server-side action, or render a JSON response back to the client for further action. Some examples of possible uses for barcode integration: Stock lookup by scanning a barcode on a box of items Receiving goods against a PurchaseOrder by scanning a supplier barcode Perform a stock adjustment action (e.g. take 10 parts from stock whenever a barcode is scanned) Barcode data are POSTed to the server as follows: POST { barcode_data: \"[(>someBarcodeDataWhichThePluginKnowsHowToDealWith\" } Action Plugins \u2693 Arbitrary \"actions\" can be called by POSTing data to the /api/action/ endpoint. The POST request must include the name of the action to be performed, and a matching ActionPlugin plugin must be loaded by the server. Arbitrary data can also be provided to the action plugin via the POST data: POST { action: \"MyCustomAction\", data: { foo: \"bar\", } } For an example of a very simple action plugin, refer to /InvenTree/plugins/action/action.py","title":"Plugins"},{"location":"extend/plugins/#inventree-plugin-architecture","text":"The InvenTree server code supports an extensible plugin architecture, allowing custom plugins to be integrated directly into the database server. This allows development of complex behaviours which are decoupled from core InvenTree code. InvenTree plugins are located in the directory ./InvenTree/plugins/ . Plugins are discovered and loaded when the server is started. Multiple plugins are supported:","title":"InvenTree Plugin Architecture"},{"location":"extend/plugins/#reporting-plugins","text":"InvenTree can generate customized reports (for example stocktake information, packing lists, acceptance test reports, etc). The reporting interface is extremely versatile, allowing the generation of reports in multiple formats (PDF / LaTeX / etc). TODO Include more information here on reporting plugins","title":"Reporting Plugins"},{"location":"extend/plugins/#barcode-plugins","text":"InvenTree supports decoding of arbitrary barcode data via a Barcode Plugin interface. Barcode data POSTed to the /api/barcode/ endpoint will be supplied to all loaded barcode plugins, and the first plugin to successfully interpret the barcode data will return a response to the client. InvenTree can generate native QR codes to represent database objects (e.g. a single StockItem). This barcode can then be used to perform quick lookup of a stock item or location in the database. A client application (for example the InvenTree mobile app) scans a barcode, and sends the barcode data to the InvenTree server. The server then uses the InvenTreeBarcodePlugin (found at /InvenTree/plugins/barcode/inventree.py ) to decode the supplied barcode data. Any third-party barcodes can be decoded by writing a matching plugin to decode the barcode data. These plugins could then perform a server-side action, or render a JSON response back to the client for further action. Some examples of possible uses for barcode integration: Stock lookup by scanning a barcode on a box of items Receiving goods against a PurchaseOrder by scanning a supplier barcode Perform a stock adjustment action (e.g. take 10 parts from stock whenever a barcode is scanned) Barcode data are POSTed to the server as follows: POST { barcode_data: \"[(>someBarcodeDataWhichThePluginKnowsHowToDealWith\" }","title":"Barcode Plugins"},{"location":"extend/plugins/#action-plugins","text":"Arbitrary \"actions\" can be called by POSTing data to the /api/action/ endpoint. The POST request must include the name of the action to be performed, and a matching ActionPlugin plugin must be loaded by the server. Arbitrary data can also be provided to the action plugin via the POST data: POST { action: \"MyCustomAction\", data: { foo: \"bar\", } } For an example of a very simple action plugin, refer to /InvenTree/plugins/action/action.py","title":"Action Plugins"},{"location":"extend/python/","text":"Python Module \u2693 A Python module is provided for rapid development of third party scripts or applications using the REST API. The python module handles authentication and API transactions, providing an extremely clean interface for interacting with and manipulating database data. Features \u2693 Automatic authentication management using token-based authentication Pythonic data access Native file uploads Powerful functions for accessing related model data Installation \u2693 The inventree python interface can be easily installed via the PIP package manager : pip3 install inventree Alternatively, it can downloaded and installed from source, from GitHub . Examples \u2693 The inventree Python module is designed to be very lightweight and simple to use. Some simple examples are provided below: Authentication \u2693 Authentication against an InvenTree server is simple: from inventree.api import InvenTreeAPI SERVER_ADDRESS = 'http://127.0.0.1:8000' MY_USERNAME = 'not_my_real_username' MY_PASSWORD = 'not_my_real_password' api = InvenTreeAPI ( SERVER_ADDRESS , username = MY_USERNAME , password = MY_PASSWORD ) Alternatively, if you already have an access token: api = InvenTreeAPI ( SERVER_ADDRESS , token = MY_TOKEN ) Retrieving Individual Items \u2693 If the primary-key of an object is already known, retrieving it from the database is performed as follows: from inventree.part import PartCategory category = PartCatgory ( api , 10 ) Querying / Listing Items \u2693 Database items can be queried by using the list method for the given class: from inventree.part import Part from inventree.stock import StockItem parts = Part . list ( api , category = 10 , assembly = True ) items = StockItem . list ( api , location = 4 , part = 24 ) Once an object has been retrieved from the database, its related objects can be returned with helper functions: part = Part ( api , 25 ) stock_items = part . getStockItems () Some classes also have helper functions for performing certain actions, such as uploading file attachments or test results: stock_item = StockItem ( api , 1001 ) stock_item . uploadTestResult ( \"Firmware\" , True , value = \"0x12345678\" , attachment = \"device_firmware.bin\" ) Creating New Items \u2693 from inventree.part import Part , PartCategory from inventree.stock import StockItem ## Create a new PartCategory object, ## underneath the existing category with pk 7 furniture = PartCategory . create ( api , { 'name' : 'Furniture' , 'description' : 'Chairs, tables, etc' , parent , 7 }) ## Create a new Part ## Use the pk (primary-key) of the newly created category couch = Part . create ( api , { 'name' : 'Couch' , 'description' : 'Long thing for sitting on' , 'category' : furniture . pk , 'active' : True , 'virtual' : False , ## Note - You do not have to fill out *all* fields }) ## Create a new StockItem item = StockItem . create ( api , { 'part' : couch . pk , 'quantity' : 5 , 'notes' : 'A stack of couches' , location : 10 , ## PK of a StockLocation already in the database... })","title":"Python Interface"},{"location":"extend/python/#python-module","text":"A Python module is provided for rapid development of third party scripts or applications using the REST API. The python module handles authentication and API transactions, providing an extremely clean interface for interacting with and manipulating database data.","title":"Python Module"},{"location":"extend/python/#features","text":"Automatic authentication management using token-based authentication Pythonic data access Native file uploads Powerful functions for accessing related model data","title":"Features"},{"location":"extend/python/#installation","text":"The inventree python interface can be easily installed via the PIP package manager : pip3 install inventree Alternatively, it can downloaded and installed from source, from GitHub .","title":"Installation"},{"location":"extend/python/#examples","text":"The inventree Python module is designed to be very lightweight and simple to use. Some simple examples are provided below:","title":"Examples"},{"location":"extend/python/#authentication","text":"Authentication against an InvenTree server is simple: from inventree.api import InvenTreeAPI SERVER_ADDRESS = 'http://127.0.0.1:8000' MY_USERNAME = 'not_my_real_username' MY_PASSWORD = 'not_my_real_password' api = InvenTreeAPI ( SERVER_ADDRESS , username = MY_USERNAME , password = MY_PASSWORD ) Alternatively, if you already have an access token: api = InvenTreeAPI ( SERVER_ADDRESS , token = MY_TOKEN )","title":"Authentication"},{"location":"extend/python/#retrieving-individual-items","text":"If the primary-key of an object is already known, retrieving it from the database is performed as follows: from inventree.part import PartCategory category = PartCatgory ( api , 10 )","title":"Retrieving Individual Items"},{"location":"extend/python/#querying-listing-items","text":"Database items can be queried by using the list method for the given class: from inventree.part import Part from inventree.stock import StockItem parts = Part . list ( api , category = 10 , assembly = True ) items = StockItem . list ( api , location = 4 , part = 24 ) Once an object has been retrieved from the database, its related objects can be returned with helper functions: part = Part ( api , 25 ) stock_items = part . getStockItems () Some classes also have helper functions for performing certain actions, such as uploading file attachments or test results: stock_item = StockItem ( api , 1001 ) stock_item . uploadTestResult ( \"Firmware\" , True , value = \"0x12345678\" , attachment = \"device_firmware.bin\" )","title":"Querying / Listing Items"},{"location":"extend/python/#creating-new-items","text":"from inventree.part import Part , PartCategory from inventree.stock import StockItem ## Create a new PartCategory object, ## underneath the existing category with pk 7 furniture = PartCategory . create ( api , { 'name' : 'Furniture' , 'description' : 'Chairs, tables, etc' , parent , 7 }) ## Create a new Part ## Use the pk (primary-key) of the newly created category couch = Part . create ( api , { 'name' : 'Couch' , 'description' : 'Long thing for sitting on' , 'category' : furniture . pk , 'active' : True , 'virtual' : False , ## Note - You do not have to fill out *all* fields }) ## Create a new StockItem item = StockItem . create ( api , { 'part' : couch . pk , 'quantity' : 5 , 'notes' : 'A stack of couches' , location : 10 , ## PK of a StockLocation already in the database... })","title":"Creating New Items"},{"location":"part/parameter/","text":"Part Parameters \u2693 TODO Parameter documentation to be written","title":"Parameters"},{"location":"part/parameter/#part-parameters","text":"TODO Parameter documentation to be written","title":"Part Parameters"},{"location":"part/part/","text":"Part \u2693 The Part is the core element of the InvenTree ecosystem. A Part object is the archetype of any stock item in your inventory. Parts are arranged in heirarchical categories which are used to organise and filter parts by function. Part Category \u2693 Part categories are very flexible and can be easily arranged to match a particular user requirement. Each part category displays a list of all parts under that given category. This means that any part belonging to a particular category, or belonging to a sub-category, will be displayed. Each part category also shows a list of sub-categories which exist underneath it. The category part list provides an overview of each part: Part name and description Part image thumbnail Part category Part stock level The list of parts underneath a given category can be filtered by multiple user-configurable filters, which is especially useful when a large number of parts exist under a certain category. Clicking on the part name links to the Part Detail view.","title":"Parts"},{"location":"part/part/#part","text":"The Part is the core element of the InvenTree ecosystem. A Part object is the archetype of any stock item in your inventory. Parts are arranged in heirarchical categories which are used to organise and filter parts by function.","title":"Part"},{"location":"part/part/#part-category","text":"Part categories are very flexible and can be easily arranged to match a particular user requirement. Each part category displays a list of all parts under that given category. This means that any part belonging to a particular category, or belonging to a sub-category, will be displayed. Each part category also shows a list of sub-categories which exist underneath it. The category part list provides an overview of each part: Part name and description Part image thumbnail Part category Part stock level The list of parts underneath a given category can be filtered by multiple user-configurable filters, which is especially useful when a large number of parts exist under a certain category. Clicking on the part name links to the Part Detail view.","title":"Part Category"},{"location":"part/template/","text":"Part Templates \u2693 TODO Parameter documentation to be written","title":"Template Parts"},{"location":"part/template/#part-templates","text":"TODO Parameter documentation to be written","title":"Part Templates"},{"location":"part/test/","text":"Part Test Templates \u2693 Parts which are designated as trackable (meaning they can be uniquely serialized) can define templates for tests which are to be performed against individual stock items corresponding to the part. A test template defines the parameters of the test; the individual stock items can then have associated test results which correspond to a test template. Test templates \"cascade\" down to variant parts: this means that if a master part has multiple variants, any test template defined for the master part will be assigned to the variants. Any stock items of the variant parts will have the same test templates associated with them. TODO Include pictures of the Test Template tab Test Template Parameters \u2693 Test Name \u2693 The name of the test is a simple string value which defines the name of the test. This test must be unique for a given part (or across a set of part variants). The test name is used to generate a test \"key\" which is then used to match against test results associated with individual stock items. Test Description \u2693 This field is a simple description for providing information back to the user. The description is not used by the InvenTree testing framework. Required \u2693 If the required flag is set, this indicates that the test is crucial for the acceptance of a particular stock item. Requires Value \u2693 If this flag is set, then a corresponding test result against a stock item must set the value parameter. Requires Attachment \u2693 If this flag is set, then a corresponding test result against a stock item must provide a file attachment uploaded. Test Results \u2693 Individual stock item objects can have test results associated with them which correspond to test templates. Refer to the stock test result documentation for further information.","title":"Tests"},{"location":"part/test/#part-test-templates","text":"Parts which are designated as trackable (meaning they can be uniquely serialized) can define templates for tests which are to be performed against individual stock items corresponding to the part. A test template defines the parameters of the test; the individual stock items can then have associated test results which correspond to a test template. Test templates \"cascade\" down to variant parts: this means that if a master part has multiple variants, any test template defined for the master part will be assigned to the variants. Any stock items of the variant parts will have the same test templates associated with them. TODO Include pictures of the Test Template tab","title":"Part Test Templates"},{"location":"part/test/#test-template-parameters","text":"","title":"Test Template Parameters"},{"location":"part/test/#test-name","text":"The name of the test is a simple string value which defines the name of the test. This test must be unique for a given part (or across a set of part variants). The test name is used to generate a test \"key\" which is then used to match against test results associated with individual stock items.","title":"Test Name"},{"location":"part/test/#test-description","text":"This field is a simple description for providing information back to the user. The description is not used by the InvenTree testing framework.","title":"Test Description"},{"location":"part/test/#required","text":"If the required flag is set, this indicates that the test is crucial for the acceptance of a particular stock item.","title":"Required"},{"location":"part/test/#requires-value","text":"If this flag is set, then a corresponding test result against a stock item must set the value parameter.","title":"Requires Value"},{"location":"part/test/#requires-attachment","text":"If this flag is set, then a corresponding test result against a stock item must provide a file attachment uploaded.","title":"Requires Attachment"},{"location":"part/test/#test-results","text":"Individual stock item objects can have test results associated with them which correspond to test templates. Refer to the stock test result documentation for further information.","title":"Test Results"},{"location":"part/views/","text":"The Part information page organizes part data into sections, displayed as tabs. Part Details \u2693 The Details tab shows a detail view which provides information about the particular part. A Part is defined in the system by the following parameters: Part Definition Fields \u2693 Part Name - The Part name is a simple (unique) text label Description - Longer form text field describing the Part Internal Part Number (IPN) - A special code which can be used to link a part to a numbering system. The IPN field is not required, but may be useful where a part numbering system has been defined. Revision - An optional revision code denoting the particular version for the part. Used when there are multiple revisions of the same master part object. Category - The Part category is used to group or arrange parts, as per the particular requirements of the user. Categories are arranged in a 'tree' where each category may have multiple child categories. External Link - An external URL field is provided to link to an external page. This could be useful the part has extra documentation located on an external server. Units - Units of measure (UoM) for this Part. The default is 'pcs' Part Options \u2693 A Part can provide different functionality based on the following options. Virtual - A Virtual part is one which does not physically exist but should still be tracked in the system. This could be a process step, machine time, software license, etc. Template - A Template part is one which can have variants which exist underneath it. Read further information about template parts here . Assembly - If a part is designated as an Assembly it can be created (or built) from other component parts. As an example, a circuit board assembly is made using multiple electronic components, which are tracked in the system. An Assembly Part has a Bill of Materials (BOM) which lists all the required sub-components. Read further information about BOM management here . Component - If a part is designated as a Component it can be used as a sub-component of an Assembly . Read further information about BOM management here Trackable - If a part is designed as trackable , it can be tracked using unique serial numbers. Purchaseable - If a part is designated as Purchaseable it can be purchased from external suppliers. Setting this flag allows parts to be added to purchase orders . Salable - If a part is designated as Salable it can be sold to external customers. Setting this flag allows parts to be added to sales orders. Active - By default, all parts are Active . Marking a part as inactive means it is not available for many actions, but the part remains in the database. If a part becomes obsolete, it is recommended that it is marked as inactive, rather than deleting it from the database. Parameters \u2693 Parts can have multiple defined parameters . Variants \u2693 If a part is a Template Part then the Variants tab will be visible. Part templates Stock \u2693 The Stock tab shows all the stock items for the selected Part . The user can quickly determine how many parts are in stock, where they are located, and the status of each Stock Item . Functions \u2693 The following functions are available from the Part Stock view. Export \u2693 Exports the stocktake data for the selected Part. Launches a dialog to select export options, and then downloads a file containing data for all stock items for this Part. New Stock Item \u2693 Launches a dialog to create a new Stock Item for the selected Part . Stock Actions \u2693 If stock items are selected in the table, stock actions are enabled via the drop-down menu. Allocations \u2693 The Allocated tab displays how many units of this part have been allocated to pending build orders and/or sales orders. This tab is only visible if the Part is a component (meaning it can be used to make assemblies), or it is salable (meaning it can be sold to customers). BOM \u2693 The BOM tab displays the Bill of Materials - a list of sub-components used to build an assembly. Each row in the BOM specifies a quantity of another Part which is required to build the assembly. This tab is only visible if the Part is an assembly (meaning it can be build from other parts). Build Orders \u2693 TODO Documentation to be written Used In \u2693 The Used In tab displays a list of other parts that this part is used to make. This tab is only visible if the Part is a component . Suppliers \u2693 The Suppliers tab displays all the Supplier Parts for the selected Part . This tab is only visible if the Part is designated as Purchaseable . Purchase Orders \u2693 The Part Purchase Orders tab lists all the Purchase Orders against the selected part. This tab is only displayed if the part is marked as Purchaseable . Sales Orders \u2693 TODO Documentation to be written Tests \u2693 If a part is marked as trackable , the user can define tests which must be performed on any stock items which are instances of this part. Read more about testing . Attachments \u2693 The Part Attachments tab displays file attachments associated with the selected Part . Multiple file attachements (such as datasheets) can be uploaded for each Part . Notes \u2693 A part may have notes attached, which support markdown formatting.","title":"Part Views"},{"location":"part/views/#part-details","text":"The Details tab shows a detail view which provides information about the particular part. A Part is defined in the system by the following parameters:","title":"Part Details"},{"location":"part/views/#part-definition-fields","text":"Part Name - The Part name is a simple (unique) text label Description - Longer form text field describing the Part Internal Part Number (IPN) - A special code which can be used to link a part to a numbering system. The IPN field is not required, but may be useful where a part numbering system has been defined. Revision - An optional revision code denoting the particular version for the part. Used when there are multiple revisions of the same master part object. Category - The Part category is used to group or arrange parts, as per the particular requirements of the user. Categories are arranged in a 'tree' where each category may have multiple child categories. External Link - An external URL field is provided to link to an external page. This could be useful the part has extra documentation located on an external server. Units - Units of measure (UoM) for this Part. The default is 'pcs'","title":"Part Definition Fields"},{"location":"part/views/#part-options","text":"A Part can provide different functionality based on the following options. Virtual - A Virtual part is one which does not physically exist but should still be tracked in the system. This could be a process step, machine time, software license, etc. Template - A Template part is one which can have variants which exist underneath it. Read further information about template parts here . Assembly - If a part is designated as an Assembly it can be created (or built) from other component parts. As an example, a circuit board assembly is made using multiple electronic components, which are tracked in the system. An Assembly Part has a Bill of Materials (BOM) which lists all the required sub-components. Read further information about BOM management here . Component - If a part is designated as a Component it can be used as a sub-component of an Assembly . Read further information about BOM management here Trackable - If a part is designed as trackable , it can be tracked using unique serial numbers. Purchaseable - If a part is designated as Purchaseable it can be purchased from external suppliers. Setting this flag allows parts to be added to purchase orders . Salable - If a part is designated as Salable it can be sold to external customers. Setting this flag allows parts to be added to sales orders. Active - By default, all parts are Active . Marking a part as inactive means it is not available for many actions, but the part remains in the database. If a part becomes obsolete, it is recommended that it is marked as inactive, rather than deleting it from the database.","title":"Part Options"},{"location":"part/views/#parameters","text":"Parts can have multiple defined parameters .","title":"Parameters"},{"location":"part/views/#variants","text":"If a part is a Template Part then the Variants tab will be visible. Part templates","title":"Variants"},{"location":"part/views/#stock","text":"The Stock tab shows all the stock items for the selected Part . The user can quickly determine how many parts are in stock, where they are located, and the status of each Stock Item .","title":"Stock"},{"location":"part/views/#functions","text":"The following functions are available from the Part Stock view.","title":"Functions"},{"location":"part/views/#export","text":"Exports the stocktake data for the selected Part. Launches a dialog to select export options, and then downloads a file containing data for all stock items for this Part.","title":"Export"},{"location":"part/views/#new-stock-item","text":"Launches a dialog to create a new Stock Item for the selected Part .","title":"New Stock Item"},{"location":"part/views/#stock-actions","text":"If stock items are selected in the table, stock actions are enabled via the drop-down menu.","title":"Stock Actions"},{"location":"part/views/#allocations","text":"The Allocated tab displays how many units of this part have been allocated to pending build orders and/or sales orders. This tab is only visible if the Part is a component (meaning it can be used to make assemblies), or it is salable (meaning it can be sold to customers).","title":"Allocations"},{"location":"part/views/#bom","text":"The BOM tab displays the Bill of Materials - a list of sub-components used to build an assembly. Each row in the BOM specifies a quantity of another Part which is required to build the assembly. This tab is only visible if the Part is an assembly (meaning it can be build from other parts).","title":"BOM"},{"location":"part/views/#build-orders","text":"TODO Documentation to be written","title":"Build Orders"},{"location":"part/views/#used-in","text":"The Used In tab displays a list of other parts that this part is used to make. This tab is only visible if the Part is a component .","title":"Used In"},{"location":"part/views/#suppliers","text":"The Suppliers tab displays all the Supplier Parts for the selected Part . This tab is only visible if the Part is designated as Purchaseable .","title":"Suppliers"},{"location":"part/views/#purchase-orders","text":"The Part Purchase Orders tab lists all the Purchase Orders against the selected part. This tab is only displayed if the part is marked as Purchaseable .","title":"Purchase Orders"},{"location":"part/views/#sales-orders","text":"TODO Documentation to be written","title":"Sales Orders"},{"location":"part/views/#tests","text":"If a part is marked as trackable , the user can define tests which must be performed on any stock items which are instances of this part. Read more about testing .","title":"Tests"},{"location":"part/views/#attachments","text":"The Part Attachments tab displays file attachments associated with the selected Part . Multiple file attachements (such as datasheets) can be uploaded for each Part .","title":"Attachments"},{"location":"part/views/#notes","text":"A part may have notes attached, which support markdown formatting.","title":"Notes"},{"location":"report/labels/","text":"Custom Labels \u2693 InvenTree supports printing of custom template-based labels, using the blabel plugin for Python. Custom labels can be generated using simple HTML templates, with support for QR-codes, and conditional formatting using the Jinja template engine. Documentation Refer to the blabel documentation for further information Creating Labels \u2693 TODO This section requires further work Stylesheet \u2693 TODO This section requires further work Context Data \u2693 Each label template is supplied with context data (variables) which can be used to display information based on the context in which the label is printed. TODO This section requires further work QR Codes \u2693 TODO This section requires further work Conditional Formatting \u2693 TODO This section requires further work Stock Labels \u2693 TODO This section requires further work Context Data \u2693 In addition to the global label context data, the following variables are made available to the StockItem label template: item - The StockItem object itself part - The Part object which is referenced by the StockItem object name - The name field of the Part object ipn - The IPN field of the Part object quantity - The quantity field of the StockItem object serial - The serial field of the StockItem object uid - The uid field of the StockItem object qrcode - JSON data representing the StockItem object, useful for rendering to a QR code tests - Dict object of TestResult data associated with the StockItem","title":"Labels"},{"location":"report/labels/#custom-labels","text":"InvenTree supports printing of custom template-based labels, using the blabel plugin for Python. Custom labels can be generated using simple HTML templates, with support for QR-codes, and conditional formatting using the Jinja template engine. Documentation Refer to the blabel documentation for further information","title":"Custom Labels"},{"location":"report/labels/#creating-labels","text":"TODO This section requires further work","title":"Creating Labels"},{"location":"report/labels/#stylesheet","text":"TODO This section requires further work","title":"Stylesheet"},{"location":"report/labels/#context-data","text":"Each label template is supplied with context data (variables) which can be used to display information based on the context in which the label is printed. TODO This section requires further work","title":"Context Data"},{"location":"report/labels/#qr-codes","text":"TODO This section requires further work","title":"QR Codes"},{"location":"report/labels/#conditional-formatting","text":"TODO This section requires further work","title":"Conditional Formatting"},{"location":"report/labels/#stock-labels","text":"TODO This section requires further work","title":"Stock Labels"},{"location":"report/labels/#context-data_1","text":"In addition to the global label context data, the following variables are made available to the StockItem label template: item - The StockItem object itself part - The Part object which is referenced by the StockItem object name - The name field of the Part object ipn - The IPN field of the Part object quantity - The quantity field of the StockItem object serial - The serial field of the StockItem object uid - The uid field of the StockItem object qrcode - JSON data representing the StockItem object, useful for rendering to a QR code tests - Dict object of TestResult data associated with the StockItem","title":"Context Data"},{"location":"report/order/","text":"Order Report \u2693 TODO This section requires further work","title":"Order"},{"location":"report/order/#order-report","text":"TODO This section requires further work","title":"Order Report"},{"location":"report/pack/","text":"Packing List \u2693 TODO This section requires further work","title":"Packing List"},{"location":"report/pack/#packing-list","text":"TODO This section requires further work","title":"Packing List"},{"location":"report/report/","text":"Custom Reporting \u2693 InvenTree supports a customizable reporting ecosystem, allowing the user to develop reporting templates that meet their particular needs. PDF reports can be generated from either HTML or LaTeX template files which are written by the user. Reports are used in a variety of situations to format data in a friendly format for printing, distribution, conformance and testing. In addition to providing the ability for end-users to provide their own reporting templates, some report types offer \"built-in\" report templates ready for use. Report Types \u2693 Following is a list of available report types Test Report : Format results of a test report against for a particular StockItem Packing List : Format a list of items for shipping or transfer Order List : Order line items Template Formats \u2693 Report templates can be written in multiple formats as per the requirement of the user. Uploaded template files are passed through the django/jinja rendering framework, and as such accept the same variable template strings as any other django template file. For example, rendering the name of a part (which is available in the particular template context as part ) is as follows: The name of the part is {{ part.name }} . Variables Templates will have different variables available to them depending on the report type. Read the detail information on each report type for further information. HTML \u2693 HTML templating uses the django-weasyprint engine for rendering templated HTML files to PDF. LaTeX \u2693 LaTeX templating uses the django-tex engine for rendering templated LaTeX files to PDF. Using LaTeX templates is much more complicated and requires advanced knowledge of configuring a LaTeX install. However it provides a much more powerful framework for generation of publication-quality documents. LaTeX Configuration To use LaTeX templating, the system where InvenTree is installed must have a LaTeX toolchain accessible from the command line. Installation of such a toolchain is beyond the scope of this documenation. Special Characters Special care must be taken to ensure that the LaTeX template file does not contain any LaTeX control characters that look like jinja template control codes! Intepreter Selection \u2693 Out of the box, the LaTeX template rendering system is set to use pdflatex as the LaTeX interpreter. However this can easily be changed in the config.yaml configuration file: ## LaTeX report rendering ## InvenTree uses the django-tex plugin to enable LaTeX report rendering ## Ref: https://pypi.org/project/django-tex/ latex : ## Select the LaTeX interpreter to use for PDF rendering ## Note: The intepreter needs to be installed on the system! ## e.g. to install pdflatex: apt-get texlive-latex-base interpreter : pdflatex ## Extra options to pass through to the LaTeX interpreter options : '' Uploading Templates \u2693 Custom report templates can be uploaded using the Admin Interface . Only users with admin access can upload and/or edit report template files.","title":"Templates"},{"location":"report/report/#custom-reporting","text":"InvenTree supports a customizable reporting ecosystem, allowing the user to develop reporting templates that meet their particular needs. PDF reports can be generated from either HTML or LaTeX template files which are written by the user. Reports are used in a variety of situations to format data in a friendly format for printing, distribution, conformance and testing. In addition to providing the ability for end-users to provide their own reporting templates, some report types offer \"built-in\" report templates ready for use.","title":"Custom Reporting"},{"location":"report/report/#report-types","text":"Following is a list of available report types Test Report : Format results of a test report against for a particular StockItem Packing List : Format a list of items for shipping or transfer Order List : Order line items","title":"Report Types"},{"location":"report/report/#template-formats","text":"Report templates can be written in multiple formats as per the requirement of the user. Uploaded template files are passed through the django/jinja rendering framework, and as such accept the same variable template strings as any other django template file. For example, rendering the name of a part (which is available in the particular template context as part ) is as follows: The name of the part is {{ part.name }} . Variables Templates will have different variables available to them depending on the report type. Read the detail information on each report type for further information.","title":"Template Formats"},{"location":"report/report/#html","text":"HTML templating uses the django-weasyprint engine for rendering templated HTML files to PDF.","title":"HTML"},{"location":"report/report/#latex","text":"LaTeX templating uses the django-tex engine for rendering templated LaTeX files to PDF. Using LaTeX templates is much more complicated and requires advanced knowledge of configuring a LaTeX install. However it provides a much more powerful framework for generation of publication-quality documents. LaTeX Configuration To use LaTeX templating, the system where InvenTree is installed must have a LaTeX toolchain accessible from the command line. Installation of such a toolchain is beyond the scope of this documenation. Special Characters Special care must be taken to ensure that the LaTeX template file does not contain any LaTeX control characters that look like jinja template control codes!","title":"LaTeX"},{"location":"report/report/#intepreter-selection","text":"Out of the box, the LaTeX template rendering system is set to use pdflatex as the LaTeX interpreter. However this can easily be changed in the config.yaml configuration file: ## LaTeX report rendering ## InvenTree uses the django-tex plugin to enable LaTeX report rendering ## Ref: https://pypi.org/project/django-tex/ latex : ## Select the LaTeX interpreter to use for PDF rendering ## Note: The intepreter needs to be installed on the system! ## e.g. to install pdflatex: apt-get texlive-latex-base interpreter : pdflatex ## Extra options to pass through to the LaTeX interpreter options : ''","title":"Intepreter Selection"},{"location":"report/report/#uploading-templates","text":"Custom report templates can be uploaded using the Admin Interface . Only users with admin access can upload and/or edit report template files.","title":"Uploading Templates"},{"location":"report/test/","text":"Test Report \u2693 InvenTree provides test result tracking functionality which allows the users to keep track of any tests which have been performed on a given stock item. Custom test reports may be generated against any given stock item. All testing data is made available to the template for custom rendering as required. For example, an \"Acceptance Test\" report template may be customized to the particular device, with the results for certain tests rendering in a particular part of the page, with any tests which have not passed highlighted. TODO This section requires further work Part Filters \u2693 A TestReport template may define a set of filters against which parts are sorted. Any Part objects which match the provided filters can use the given TestReport. This allows each TestReport to easily be assigned to a particular Part, or even multiple parts. In the example below, a test report template is uploaded and assigned to the part with the name \"My Widget\" . Any combination of fields relevent to the Part model can be used here. Context Variables \u2693 The following context variables are made available to the TestReport template for rendering: stock_item : The individual stock item for which this test report is being generated part : The Part of which the stock_item is an instance results : A dict of test result objects, where the 'key' for each test result is a shortened version of the test name (see below) result_list : A list of each test result object Results \u2693 The results context variable provides a very convenient method of callout out a particular test result by name. Example \u2693 Say for example that a Part \"Electronic Widget\" has a stock item with serial number #123, and has a test result uploaded called \"Firmware Checksum\". The templated file can reference this data as follows: < h3 > Part: {{ part.name }} </ h3 > < b > Serial Number: {{ stock_item.serial }} </ b > < hr > < p > Firmware Checksum: {{ results.firmwarechecksum.value }}. Uploaded by {{ results.firmwarechecksum.user }} </ p >","title":"Test Reports"},{"location":"report/test/#test-report","text":"InvenTree provides test result tracking functionality which allows the users to keep track of any tests which have been performed on a given stock item. Custom test reports may be generated against any given stock item. All testing data is made available to the template for custom rendering as required. For example, an \"Acceptance Test\" report template may be customized to the particular device, with the results for certain tests rendering in a particular part of the page, with any tests which have not passed highlighted. TODO This section requires further work","title":"Test Report"},{"location":"report/test/#part-filters","text":"A TestReport template may define a set of filters against which parts are sorted. Any Part objects which match the provided filters can use the given TestReport. This allows each TestReport to easily be assigned to a particular Part, or even multiple parts. In the example below, a test report template is uploaded and assigned to the part with the name \"My Widget\" . Any combination of fields relevent to the Part model can be used here.","title":"Part Filters"},{"location":"report/test/#context-variables","text":"The following context variables are made available to the TestReport template for rendering: stock_item : The individual stock item for which this test report is being generated part : The Part of which the stock_item is an instance results : A dict of test result objects, where the 'key' for each test result is a shortened version of the test name (see below) result_list : A list of each test result object","title":"Context Variables"},{"location":"report/test/#results","text":"The results context variable provides a very convenient method of callout out a particular test result by name.","title":"Results"},{"location":"report/test/#example","text":"Say for example that a Part \"Electronic Widget\" has a stock item with serial number #123, and has a test result uploaded called \"Firmware Checksum\". The templated file can reference this data as follows: < h3 > Part: {{ part.name }} </ h3 > < b > Serial Number: {{ stock_item.serial }} </ b > < hr > < p > Firmware Checksum: {{ results.firmwarechecksum.value }}. Uploaded by {{ results.firmwarechecksum.user }} </ p >","title":"Example"},{"location":"start/config/","text":"Database Configuration \u2693 Admin users will need to adjust the InvenTree installation to meet the particular needs of their setup. For example, pointing to the correct database backend, or specifying a list of allowed hosts. The Django configuration parameters are found in the normal place ( settings.py ). However the settings presented in this file should not be adjusted as they will alter the core behaviour of the InvenTree application. Configuration File \u2693 To support install specific settings, a simple configuration file config.yaml is provided. This configuration file is loaded by the InvenTree server at runtime. Settings specific to a given install should be adjusted in config.yaml . Config file location The InvenTree config file is located at ./InvenTree/config.yaml The default configuration file launches a DEBUG configuration with a simple SQLITE database backend. This default configuration file is shown below: # Database backend selection - Configure backend database settings # Ref: https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-DATABASES # Specify database parameters below as they appear in the Django docs database : # Example configuration - sqlite (default) ENGINE : django.db.backends.sqlite3 NAME : '../inventree_default_db.sqlite3' # For more complex database installations, further parameters are required # Refer to the django documentation for full list of options # Example Configuration - MySQL #ENGINE: django.db.backends.mysql #NAME: inventree #USER: inventree_username #PASSWORD: inventree_password #HOST: '' #PORT: '' # Select default system language (default is 'en-us') language : en-us # Set debug to False to run in production mode debug : True # Allowed hosts (see ALLOWED_HOSTS in Django settings documentation) # A list of strings representing the host/domain names that this Django site can serve. # Default behaviour is to allow all hosts (THIS IS NOT SECURE!) allowed_hosts : - '*' # Cross Origin Resource Sharing (CORS) settings (see https://github.com/ottoyiu/django-cors-headers) # Following parameters are cors : # CORS_ORIGIN_ALLOW_ALL - If True, the whitelist will not be used and all origins will be accepted. allow_all : True # CORS_ORIGIN_WHITELIST - A list of origins that are authorized to make cross-site HTTP requests. Defaults to [] # whitelist: # - https://example.com # - https://sub.example.com # MEDIA_ROOT is the local filesystem location for storing uploaded files # By default, it is stored in a directory named 'inventree_media' local to the InvenTree directory # This should be changed for a production installation media_root : '../inventree_media' # STATIC_ROOT is the local filesystem location for storing static files # By default it is stored in a directory named 'inventree_static' local to the InvenTree directory static_root : '../inventree_static' # Optional URL schemes to allow in URL fields # By default, only the following schemes are allowed: ['http', 'https', 'ftp', 'ftps'] # Uncomment the lines below to allow extra schemes #extra_url_schemes: # - mailto # - git # - ssh # Set debug_toolbar to True to enable a debugging toolbar for InvenTree # Note: This will only be displayed if DEBUG mode is enabled, # and only if InvenTree is accessed from a local IP (127.0.0.1) debug_toolbar : False # Backup options # Set the backup_dir parameter to store backup files in a specific location # If unspecified, the local user's temp directory will be used #backup_dir: '/home/inventree/backup/' # Sentry.io integration # If you have a sentry.io account, it can be used to log server errors # Ensure sentry_sdk is installed by running 'pip install sentry-sdk' sentry : enabled : False # dsn: add-your-sentry-dsn-here # LaTeX report rendering # InvenTree uses the django-tex plugin to enable LaTeX report rendering # Ref: https://pypi.org/project/django-tex/ # Note: Ensure that a working LaTeX toolchain is installed and working *before* starting the server latex : # Select the LaTeX interpreter to use for PDF rendering # Note: The intepreter needs to be installed on the system! # e.g. to install pdflatex: apt-get texlive-latex-base enabled : False interpreter : pdflatex # Extra options to pass through to the LaTeX interpreter options : '' # Permit custom authentication backends #authentication_backends: # - 'django.contrib.auth.backends.ModelBackend' # Custom middleware, sometimes needed alongside an authentication backend change. #middleware: # - 'django.middleware.security.SecurityMiddleware' # - 'django.contrib.sessions.middleware.SessionMiddleware' # - 'django.middleware.locale.LocaleMiddleware' # - 'django.middleware.common.CommonMiddleware' # - 'django.middleware.csrf.CsrfViewMiddleware' # - 'corsheaders.middleware.CorsMiddleware' # - 'django.contrib.auth.middleware.AuthenticationMiddleware' # - 'django.contrib.messages.middleware.MessageMiddleware' # - 'django.middleware.clickjacking.XFrameOptionsMiddleware' # - 'InvenTree.middleware.AuthRequiredMiddleware' Database Options \u2693 InvenTree provides support for multiple database backends - any backend supported natively by Django can be used. Database options are specified under the database heading in the configuration file. Any option available in the Django documentation can be used here - it is passed through transparently to the management scripts. SQLite: By default, InvenTree uses an sqlite database file : inventree_db.sqlite3 . This provides a simple, portable database file that is easy to use for debug and testing purposes. MySQL: MySQL database backend is supported with the native Django implemetation. To run InvenTree with the MySQL backend, a number of extra packages need to be installed: mysql-server - MySQL backend server libmysqlclient-dev - Required for connecting to the MySQL database in Python (pip) mysqlclient - Python package for communication with MySQL database To install these required packages, run the following command: invoke mysql It is then up to the database adminstrator to create a new MySQL database to store inventree data, in addition to a username/password to access the data. MySQL Collation When creating the MySQL database, the adminstrator must ensure that the collation option is set to utf8_unicode_520_ci to ensure that InvenTree features function correctly. The database options (in the config.yaml file) then need to be adjusted to communicate the MySQL backend. Refer to the Django docs for further information. PostgreSQL: PostgreSQL database backend is supported with the native Django implementation. Note that to use this backend, the following system packages must be installed: postgresql postgresql-contrib libpq-dev (pip3) psycopg2 To install these required packages, run the following commands: invoke postgresql It is then up to the database adminstrator to create a new PostgreSQL database to store inventree data, in addition to a username/password to access the data. The database options (in the config.yaml file) then need to be adjusted to communicate the PostgreSQL backend. Refer to the Django docs for further information. Allowed Hosts / CORS \u2693 By default, all hosts are allowed, and CORS requests are enabled from any origin. This is not secure and should be adjusted for your installation . These options can be changed in the configuration file. For further information, refer to the following documentation: Django ALLOWED_HOSTS Django CORS headers Static File Storage \u2693 By default, static files are stored in the local directory ./inventree_media . This directory should be changed in the config file based on the particular installation requirements. Uploaded File Storage \u2693 By default, uploaded media files are stored in the local directory ./inventree_media . This directory should be changed in the config file based on the particular installation requirements. Backup Location \u2693 The default behaviour of the database backup is to generate backup files for database tables and media files to the user's temporary directory. The target directory can be overridden by setting the backup_dir parameter in the config file. Sentry.io Integration \u2693 InvenTree supports sentry.io integration using the native django/sentry bindings. If you have a sentry.io account, create a new dsn and provide this in the config.yaml file. LaTeX Support \u2693 To enable genration of LaTeX reports, latex support must be enabled here. enabled : Set to True to enable LaTeX support interpreter : Select the LaTeX interpreter to be used (must be installed on the local machine!) Authentication Backends \u2693 Custom authentication backends can be used by specifying them here Middleware \u2693 Custom middleware layers can specified here.","title":"Configuration"},{"location":"start/config/#database-configuration","text":"Admin users will need to adjust the InvenTree installation to meet the particular needs of their setup. For example, pointing to the correct database backend, or specifying a list of allowed hosts. The Django configuration parameters are found in the normal place ( settings.py ). However the settings presented in this file should not be adjusted as they will alter the core behaviour of the InvenTree application.","title":"Database Configuration"},{"location":"start/config/#configuration-file","text":"To support install specific settings, a simple configuration file config.yaml is provided. This configuration file is loaded by the InvenTree server at runtime. Settings specific to a given install should be adjusted in config.yaml . Config file location The InvenTree config file is located at ./InvenTree/config.yaml The default configuration file launches a DEBUG configuration with a simple SQLITE database backend. This default configuration file is shown below: # Database backend selection - Configure backend database settings # Ref: https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-DATABASES # Specify database parameters below as they appear in the Django docs database : # Example configuration - sqlite (default) ENGINE : django.db.backends.sqlite3 NAME : '../inventree_default_db.sqlite3' # For more complex database installations, further parameters are required # Refer to the django documentation for full list of options # Example Configuration - MySQL #ENGINE: django.db.backends.mysql #NAME: inventree #USER: inventree_username #PASSWORD: inventree_password #HOST: '' #PORT: '' # Select default system language (default is 'en-us') language : en-us # Set debug to False to run in production mode debug : True # Allowed hosts (see ALLOWED_HOSTS in Django settings documentation) # A list of strings representing the host/domain names that this Django site can serve. # Default behaviour is to allow all hosts (THIS IS NOT SECURE!) allowed_hosts : - '*' # Cross Origin Resource Sharing (CORS) settings (see https://github.com/ottoyiu/django-cors-headers) # Following parameters are cors : # CORS_ORIGIN_ALLOW_ALL - If True, the whitelist will not be used and all origins will be accepted. allow_all : True # CORS_ORIGIN_WHITELIST - A list of origins that are authorized to make cross-site HTTP requests. Defaults to [] # whitelist: # - https://example.com # - https://sub.example.com # MEDIA_ROOT is the local filesystem location for storing uploaded files # By default, it is stored in a directory named 'inventree_media' local to the InvenTree directory # This should be changed for a production installation media_root : '../inventree_media' # STATIC_ROOT is the local filesystem location for storing static files # By default it is stored in a directory named 'inventree_static' local to the InvenTree directory static_root : '../inventree_static' # Optional URL schemes to allow in URL fields # By default, only the following schemes are allowed: ['http', 'https', 'ftp', 'ftps'] # Uncomment the lines below to allow extra schemes #extra_url_schemes: # - mailto # - git # - ssh # Set debug_toolbar to True to enable a debugging toolbar for InvenTree # Note: This will only be displayed if DEBUG mode is enabled, # and only if InvenTree is accessed from a local IP (127.0.0.1) debug_toolbar : False # Backup options # Set the backup_dir parameter to store backup files in a specific location # If unspecified, the local user's temp directory will be used #backup_dir: '/home/inventree/backup/' # Sentry.io integration # If you have a sentry.io account, it can be used to log server errors # Ensure sentry_sdk is installed by running 'pip install sentry-sdk' sentry : enabled : False # dsn: add-your-sentry-dsn-here # LaTeX report rendering # InvenTree uses the django-tex plugin to enable LaTeX report rendering # Ref: https://pypi.org/project/django-tex/ # Note: Ensure that a working LaTeX toolchain is installed and working *before* starting the server latex : # Select the LaTeX interpreter to use for PDF rendering # Note: The intepreter needs to be installed on the system! # e.g. to install pdflatex: apt-get texlive-latex-base enabled : False interpreter : pdflatex # Extra options to pass through to the LaTeX interpreter options : '' # Permit custom authentication backends #authentication_backends: # - 'django.contrib.auth.backends.ModelBackend' # Custom middleware, sometimes needed alongside an authentication backend change. #middleware: # - 'django.middleware.security.SecurityMiddleware' # - 'django.contrib.sessions.middleware.SessionMiddleware' # - 'django.middleware.locale.LocaleMiddleware' # - 'django.middleware.common.CommonMiddleware' # - 'django.middleware.csrf.CsrfViewMiddleware' # - 'corsheaders.middleware.CorsMiddleware' # - 'django.contrib.auth.middleware.AuthenticationMiddleware' # - 'django.contrib.messages.middleware.MessageMiddleware' # - 'django.middleware.clickjacking.XFrameOptionsMiddleware' # - 'InvenTree.middleware.AuthRequiredMiddleware'","title":"Configuration File"},{"location":"start/config/#database-options","text":"InvenTree provides support for multiple database backends - any backend supported natively by Django can be used. Database options are specified under the database heading in the configuration file. Any option available in the Django documentation can be used here - it is passed through transparently to the management scripts. SQLite: By default, InvenTree uses an sqlite database file : inventree_db.sqlite3 . This provides a simple, portable database file that is easy to use for debug and testing purposes. MySQL: MySQL database backend is supported with the native Django implemetation. To run InvenTree with the MySQL backend, a number of extra packages need to be installed: mysql-server - MySQL backend server libmysqlclient-dev - Required for connecting to the MySQL database in Python (pip) mysqlclient - Python package for communication with MySQL database To install these required packages, run the following command: invoke mysql It is then up to the database adminstrator to create a new MySQL database to store inventree data, in addition to a username/password to access the data. MySQL Collation When creating the MySQL database, the adminstrator must ensure that the collation option is set to utf8_unicode_520_ci to ensure that InvenTree features function correctly. The database options (in the config.yaml file) then need to be adjusted to communicate the MySQL backend. Refer to the Django docs for further information. PostgreSQL: PostgreSQL database backend is supported with the native Django implementation. Note that to use this backend, the following system packages must be installed: postgresql postgresql-contrib libpq-dev (pip3) psycopg2 To install these required packages, run the following commands: invoke postgresql It is then up to the database adminstrator to create a new PostgreSQL database to store inventree data, in addition to a username/password to access the data. The database options (in the config.yaml file) then need to be adjusted to communicate the PostgreSQL backend. Refer to the Django docs for further information.","title":"Database Options"},{"location":"start/config/#allowed-hosts-cors","text":"By default, all hosts are allowed, and CORS requests are enabled from any origin. This is not secure and should be adjusted for your installation . These options can be changed in the configuration file. For further information, refer to the following documentation: Django ALLOWED_HOSTS Django CORS headers","title":"Allowed Hosts / CORS"},{"location":"start/config/#static-file-storage","text":"By default, static files are stored in the local directory ./inventree_media . This directory should be changed in the config file based on the particular installation requirements.","title":"Static File Storage"},{"location":"start/config/#uploaded-file-storage","text":"By default, uploaded media files are stored in the local directory ./inventree_media . This directory should be changed in the config file based on the particular installation requirements.","title":"Uploaded File Storage"},{"location":"start/config/#backup-location","text":"The default behaviour of the database backup is to generate backup files for database tables and media files to the user's temporary directory. The target directory can be overridden by setting the backup_dir parameter in the config file.","title":"Backup Location"},{"location":"start/config/#sentryio-integration","text":"InvenTree supports sentry.io integration using the native django/sentry bindings. If you have a sentry.io account, create a new dsn and provide this in the config.yaml file.","title":"Sentry.io Integration"},{"location":"start/config/#latex-support","text":"To enable genration of LaTeX reports, latex support must be enabled here. enabled : Set to True to enable LaTeX support interpreter : Select the LaTeX interpreter to be used (must be installed on the local machine!)","title":"LaTeX Support"},{"location":"start/config/#authentication-backends","text":"Custom authentication backends can be used by specifying them here","title":"Authentication Backends"},{"location":"start/config/#middleware","text":"Custom middleware layers can specified here.","title":"Middleware"},{"location":"start/deploy/","text":"Deploying InvenTree \u2693 The development server provided by the Django ecosystem may be fine for a testing environment or small contained setups. However special consideration must be given when deploying InvenTree in a real-world environment. Django apps provide multiple deployment methods - see the Django documentation . There are also numerous online tutorials describing how to deploy a Django application either locally or on an online platform. Development Server \u2693 The InvenTree development server is useful for testing and configuration - and it may be wholly sufficient for a small-scale installation. Running on a Local Machine \u2693 To run the development server on a local machine, run the command: invoke server -a 127.0.0.1:8000 Serving on the address 127.0.0.1 means that InvenTree will only be available on that computer . The server will be accessible from a web browser on the same computer, but not from any other computers on the local network. Running on a Local Network \u2693 To enable access to the InvenTree server from other computers on a local network, you need to know the IP of the computer running the server. For example, if the server IP address is 192.168.120.1 : invoke server -a 192.168.120.1:8000 Gunicorn \u2693 Following is a simple tutorial on serving InvenTree using Gunicorn . Gunicorn is a Python WSGI server which provides a multi-worker server which is well suited to handling multiple simultaneous requests. Gunicorn is a solid choice for a production server which is easy to configure and performs well in a multi-user environment. Install Gunicorn \u2693 Gunicorn can be installed using PIP: pip3 install gunicorn Configure Static Directories \u2693 Directories for storing media files and static files should be specified in the config.yaml configuration file. These directories are the MEDIA_ROOT and STATIC_ROOT paths required by the Django app. Ensure that both of these directories are correctly configured for your setup. Collect Static Files \u2693 The required static files must be collected into the specified STATIC_ROOT directory: invoke static This command collects all of the required static files (including script and css files) into the specified directory ready to be served. Configure Gunicorn \u2693 The Gunicorn server can be configured with a simple configuration file (e.g. python script). An example configuration file is provided in InvenTree/gunicorn.conf.py import multiprocessing bind = \"0.0.0.0:8000\" workers = multiprocessing . cpu_count () * 2 + 1 This file can be used to configure the Gunicorn server to match particular requirements. Run Gunicorn \u2693 cd InvenTree gunicorn -c gunicorn.conf.py InvenTree.wsgi","title":"Deploying"},{"location":"start/deploy/#deploying-inventree","text":"The development server provided by the Django ecosystem may be fine for a testing environment or small contained setups. However special consideration must be given when deploying InvenTree in a real-world environment. Django apps provide multiple deployment methods - see the Django documentation . There are also numerous online tutorials describing how to deploy a Django application either locally or on an online platform.","title":"Deploying InvenTree"},{"location":"start/deploy/#development-server","text":"The InvenTree development server is useful for testing and configuration - and it may be wholly sufficient for a small-scale installation.","title":"Development Server"},{"location":"start/deploy/#running-on-a-local-machine","text":"To run the development server on a local machine, run the command: invoke server -a 127.0.0.1:8000 Serving on the address 127.0.0.1 means that InvenTree will only be available on that computer . The server will be accessible from a web browser on the same computer, but not from any other computers on the local network.","title":"Running on a Local Machine"},{"location":"start/deploy/#running-on-a-local-network","text":"To enable access to the InvenTree server from other computers on a local network, you need to know the IP of the computer running the server. For example, if the server IP address is 192.168.120.1 : invoke server -a 192.168.120.1:8000","title":"Running on a Local Network"},{"location":"start/deploy/#gunicorn","text":"Following is a simple tutorial on serving InvenTree using Gunicorn . Gunicorn is a Python WSGI server which provides a multi-worker server which is well suited to handling multiple simultaneous requests. Gunicorn is a solid choice for a production server which is easy to configure and performs well in a multi-user environment.","title":"Gunicorn"},{"location":"start/deploy/#install-gunicorn","text":"Gunicorn can be installed using PIP: pip3 install gunicorn","title":"Install Gunicorn"},{"location":"start/deploy/#configure-static-directories","text":"Directories for storing media files and static files should be specified in the config.yaml configuration file. These directories are the MEDIA_ROOT and STATIC_ROOT paths required by the Django app. Ensure that both of these directories are correctly configured for your setup.","title":"Configure Static Directories"},{"location":"start/deploy/#collect-static-files","text":"The required static files must be collected into the specified STATIC_ROOT directory: invoke static This command collects all of the required static files (including script and css files) into the specified directory ready to be served.","title":"Collect Static Files"},{"location":"start/deploy/#configure-gunicorn","text":"The Gunicorn server can be configured with a simple configuration file (e.g. python script). An example configuration file is provided in InvenTree/gunicorn.conf.py import multiprocessing bind = \"0.0.0.0:8000\" workers = multiprocessing . cpu_count () * 2 + 1 This file can be used to configure the Gunicorn server to match particular requirements.","title":"Configure Gunicorn"},{"location":"start/deploy/#run-gunicorn","text":"cd InvenTree gunicorn -c gunicorn.conf.py InvenTree.wsgi","title":"Run Gunicorn"},{"location":"start/install/","text":"Introduction \u2693 The InvenTree server application communicates with a backend database, and serves data to the user(s) via a web framework and an API. Before users can interact with the InvenTree system, the server must be installed and properly configured, and then the server process must be started (at a network location which is accessible to the users). Supported Databases \u2693 InvenTree can be used by any database backend which is supported by the Django framework : SQLite PostgreSQL MariaDB MySQL Oracle Database selection should be determined by your particular installation requirements. By default, InvenTree uses SQLite which provides a simple file-based database that allows a quick setup for development and testing. Serving Data \u2693 Once a database is setup, you need a way of accessing the data. InvenTree provides a \"server\" application out of the box, but this may not scale particularly well with multiple users. Instead, InvenTree can be served using a webserver such as Gunicorn . For more information see the deployment documentation . Setup \u2693 To install a complete development environment for InvenTree, follow the steps presented below. A production environment will require further work as per the particular application requirements. Windows If you are using the Windows operating system, it is recommended that you use the WSL (Windows Subsystem for Linux) framework Requirements \u2693 To install InvenTree you will need python3 (>3.6) installed, as well as PIP (the Python package manager). Install these required programs (e.g. using apt or similar) before running the setup scripts. For example: sudo apt-get update sudo apt-get install python3 python3-dev python3-pip Sudo apt-get commands will (most likely) be required to run under sudo. Take care not to run the installation scripts under sudo, as this may alter the system python path and cause the InvenTree installation to not work correctly Python Virtual Environment \u2693 Installing the required Python packages inside a virtual environment allows a local install separate to the system-wide Python installation. While not strictly necessary, using a virtual environment is highly recommended as it prevents conflicts between the different Python installations. You can read more about Python virtual environments here . To configure Inventree inside a virtual environment, cd into the inventree base directory and run the following commands: sudo apt-get install python3-venv python3 -m venv inventree-env source inventree-env/bin/activate This will place the current shell session inside a virtual environment - the terminal should display the (inventree-env) prefix. Activate virtual environment Remember to activate the virtual environment when starting each shell session, before running Inventree commands. This will ensure that the correct environment is being used. Invoke \u2693 InvenTree setup is performed using the invoke Python build tool. Various useful scripts are defined in the tasks.py file. Install invoke as follows: pip3 install invoke To display a list of the available configuration scripts, run the following command: invoke --list Download Source Code \u2693 Download the InvenTree source code to a local directory. It is recommended to perform this step using git, as this allows the InvenTree installation to be easily updated to the latest version. git clone https://github.com/inventree/inventree/ Alternatively, the source can be downloaded as a .zip archive . Once the source is downloaded, cd into the source directory: cd /path/to/inventree/ (substitute /path/to/inventree/ with the directory where you have downloaded the source code) . Installation \u2693 Now that the source code is downloaded (and optionally you have configured a Python virtual environment), the Python packages required to run InvenTree can be installed. InvenTree is a Python/Django application and relies on the pip package manager. All packages required to develop and test InvenTree are installed via pip. Package requirements can be found in requirements.txt . To setup the InvenTree environment, run the following commands (from the InvenTree source directory): invoke install This installs all required Python packages using pip package manager. It also creates a (default) database configuration file which needs to be edited to meet user needs before proceeding (see next step below). Additionally, this step creates a SECRET_KEY file which is used for the django authentication framework. Keep it secret, keep it safe The SECRET_KEY file should never be shared or made public. Database Configuration \u2693 Once the required packages are installed, the database configuration must be adjusted to suit your particular needs. InvenTree provides a simple default setup which should work out of the box for testing and debug purposes. As part of the previous install step, a configuration file ( config.yaml ) is created. The configuration file provides administrators control over various setup options without digging into the Django settings.py script. The default setup uses a local sqlite database with DEBUG mode enabled. For further information on installation configuration, refer to the Configuration section. Configure Database Ensure database settings are correctly configured in config.yaml before proceeding to the next step! Initialize Database \u2693 Once install settings are correctly configured (in config.yaml ) run the initial setup script: invoke migrate This performs the initial database migrations, creating the required tables, etc. The database should now be installed! Create Admin Account \u2693 Create an initial superuser (administrator) account for the InvenTree instance: invoke superuser Run Development Server \u2693 The InvenTree database is now setup and ready to run. A simple development server can be launched from the command line. To launch the development server, run the following commands: invoke server For more server options, run: invoke server -h This will launch the InvenTree web interface at http://127.0.0.1:8000 . For other options refer to the django docs Run Production Server \u2693 For a production install, refer to deployment instructions .","title":"Installation"},{"location":"start/install/#introduction","text":"The InvenTree server application communicates with a backend database, and serves data to the user(s) via a web framework and an API. Before users can interact with the InvenTree system, the server must be installed and properly configured, and then the server process must be started (at a network location which is accessible to the users).","title":"Introduction"},{"location":"start/install/#supported-databases","text":"InvenTree can be used by any database backend which is supported by the Django framework : SQLite PostgreSQL MariaDB MySQL Oracle Database selection should be determined by your particular installation requirements. By default, InvenTree uses SQLite which provides a simple file-based database that allows a quick setup for development and testing.","title":"Supported Databases"},{"location":"start/install/#serving-data","text":"Once a database is setup, you need a way of accessing the data. InvenTree provides a \"server\" application out of the box, but this may not scale particularly well with multiple users. Instead, InvenTree can be served using a webserver such as Gunicorn . For more information see the deployment documentation .","title":"Serving Data"},{"location":"start/install/#setup","text":"To install a complete development environment for InvenTree, follow the steps presented below. A production environment will require further work as per the particular application requirements. Windows If you are using the Windows operating system, it is recommended that you use the WSL (Windows Subsystem for Linux) framework","title":"Setup"},{"location":"start/install/#requirements","text":"To install InvenTree you will need python3 (>3.6) installed, as well as PIP (the Python package manager). Install these required programs (e.g. using apt or similar) before running the setup scripts. For example: sudo apt-get update sudo apt-get install python3 python3-dev python3-pip Sudo apt-get commands will (most likely) be required to run under sudo. Take care not to run the installation scripts under sudo, as this may alter the system python path and cause the InvenTree installation to not work correctly","title":"Requirements"},{"location":"start/install/#python-virtual-environment","text":"Installing the required Python packages inside a virtual environment allows a local install separate to the system-wide Python installation. While not strictly necessary, using a virtual environment is highly recommended as it prevents conflicts between the different Python installations. You can read more about Python virtual environments here . To configure Inventree inside a virtual environment, cd into the inventree base directory and run the following commands: sudo apt-get install python3-venv python3 -m venv inventree-env source inventree-env/bin/activate This will place the current shell session inside a virtual environment - the terminal should display the (inventree-env) prefix. Activate virtual environment Remember to activate the virtual environment when starting each shell session, before running Inventree commands. This will ensure that the correct environment is being used.","title":"Python Virtual Environment"},{"location":"start/install/#invoke","text":"InvenTree setup is performed using the invoke Python build tool. Various useful scripts are defined in the tasks.py file. Install invoke as follows: pip3 install invoke To display a list of the available configuration scripts, run the following command: invoke --list","title":"Invoke"},{"location":"start/install/#download-source-code","text":"Download the InvenTree source code to a local directory. It is recommended to perform this step using git, as this allows the InvenTree installation to be easily updated to the latest version. git clone https://github.com/inventree/inventree/ Alternatively, the source can be downloaded as a .zip archive . Once the source is downloaded, cd into the source directory: cd /path/to/inventree/ (substitute /path/to/inventree/ with the directory where you have downloaded the source code) .","title":"Download Source Code"},{"location":"start/install/#installation","text":"Now that the source code is downloaded (and optionally you have configured a Python virtual environment), the Python packages required to run InvenTree can be installed. InvenTree is a Python/Django application and relies on the pip package manager. All packages required to develop and test InvenTree are installed via pip. Package requirements can be found in requirements.txt . To setup the InvenTree environment, run the following commands (from the InvenTree source directory): invoke install This installs all required Python packages using pip package manager. It also creates a (default) database configuration file which needs to be edited to meet user needs before proceeding (see next step below). Additionally, this step creates a SECRET_KEY file which is used for the django authentication framework. Keep it secret, keep it safe The SECRET_KEY file should never be shared or made public.","title":"Installation"},{"location":"start/install/#database-configuration","text":"Once the required packages are installed, the database configuration must be adjusted to suit your particular needs. InvenTree provides a simple default setup which should work out of the box for testing and debug purposes. As part of the previous install step, a configuration file ( config.yaml ) is created. The configuration file provides administrators control over various setup options without digging into the Django settings.py script. The default setup uses a local sqlite database with DEBUG mode enabled. For further information on installation configuration, refer to the Configuration section. Configure Database Ensure database settings are correctly configured in config.yaml before proceeding to the next step!","title":"Database Configuration"},{"location":"start/install/#initialize-database","text":"Once install settings are correctly configured (in config.yaml ) run the initial setup script: invoke migrate This performs the initial database migrations, creating the required tables, etc. The database should now be installed!","title":"Initialize Database"},{"location":"start/install/#create-admin-account","text":"Create an initial superuser (administrator) account for the InvenTree instance: invoke superuser","title":"Create Admin Account"},{"location":"start/install/#run-development-server","text":"The InvenTree database is now setup and ready to run. A simple development server can be launched from the command line. To launch the development server, run the following commands: invoke server For more server options, run: invoke server -h This will launch the InvenTree web interface at http://127.0.0.1:8000 . For other options refer to the django docs","title":"Run Development Server"},{"location":"start/install/#run-production-server","text":"For a production install, refer to deployment instructions .","title":"Run Production Server"},{"location":"start/migrate/","text":"Migrating Data \u2693 In the case that data needs to be migrated from one database installation to another, the following procedure can be used to export data, initialize the new database, and re-import the data. Backup Database Ensure that the original database is securely backed up first! Export Data \u2693 python3 InvenTree/manage.py dumpdata --exclude contenttypes --exclude auth.permission --indent 2 > data.json This will export all data (including user information) to a json data file. Initialize New Database \u2693 Configure the new database using the normal processes (see Configuration ) Then, ensure that the database schema are correctly initialized in the new database: python3 InvenTree/manage.py makemigrations python3 InvenTree/manage.py migrate --run-syncdb Import Data \u2693 The new database should now be correctly initialized with the correct table structures requried to import the data. Run the following command to load the databased dump file into the new database. python3 InvenTree / manage . py loaddata data . json Character Encoding If the character encoding of the data file does not exactly match the target database, the import operation may not succeed. In this case, some manual editing of the database JSON file may be required.","title":"Migrating"},{"location":"start/migrate/#migrating-data","text":"In the case that data needs to be migrated from one database installation to another, the following procedure can be used to export data, initialize the new database, and re-import the data. Backup Database Ensure that the original database is securely backed up first!","title":"Migrating Data"},{"location":"start/migrate/#export-data","text":"python3 InvenTree/manage.py dumpdata --exclude contenttypes --exclude auth.permission --indent 2 > data.json This will export all data (including user information) to a json data file.","title":"Export Data"},{"location":"start/migrate/#initialize-new-database","text":"Configure the new database using the normal processes (see Configuration ) Then, ensure that the database schema are correctly initialized in the new database: python3 InvenTree/manage.py makemigrations python3 InvenTree/manage.py migrate --run-syncdb","title":"Initialize New Database"},{"location":"start/migrate/#import-data","text":"The new database should now be correctly initialized with the correct table structures requried to import the data. Run the following command to load the databased dump file into the new database. python3 InvenTree / manage . py loaddata data . json Character Encoding If the character encoding of the data file does not exactly match the target database, the import operation may not succeed. In this case, some manual editing of the database JSON file may be required.","title":"Import Data"},{"location":"start/update/","text":"Update InvenTree \u2693 Administrators wishing to update InvenTree to the latest version should follow the instructions below. The commands listed below should be run from the InvenTree root directory. Update Database It is advisable to backup the InvenTree database before performing these steps. The particular backup procedure may depend on your installation details. Stop InvenTree Server \u2693 Ensure the InvenTree server is stopped. This will depend on the particulars of your database installation. Update Source Code \u2693 Update the InvenTree source code to the latest version (or a particular commit if required). For example, pull down the latest InvenTree sourcecode using Git: git pull origin master Perform Database Migrations \u2693 Updating the database is as simple as calling the update script: invoke update This command performs the following steps: Ensure all rquired packages are installed and up to date Perform required database schema changes Run the user through any steps which require interaction Collect any new or updated static files Restart Server \u2693 Ensure the InvenTree server is restarted. This will depend on the particulars of your database installation.","title":"Updating"},{"location":"start/update/#update-inventree","text":"Administrators wishing to update InvenTree to the latest version should follow the instructions below. The commands listed below should be run from the InvenTree root directory. Update Database It is advisable to backup the InvenTree database before performing these steps. The particular backup procedure may depend on your installation details.","title":"Update InvenTree"},{"location":"start/update/#stop-inventree-server","text":"Ensure the InvenTree server is stopped. This will depend on the particulars of your database installation.","title":"Stop InvenTree Server"},{"location":"start/update/#update-source-code","text":"Update the InvenTree source code to the latest version (or a particular commit if required). For example, pull down the latest InvenTree sourcecode using Git: git pull origin master","title":"Update Source Code"},{"location":"start/update/#perform-database-migrations","text":"Updating the database is as simple as calling the update script: invoke update This command performs the following steps: Ensure all rquired packages are installed and up to date Perform required database schema changes Run the user through any steps which require interaction Collect any new or updated static files","title":"Perform Database Migrations"},{"location":"start/update/#restart-server","text":"Ensure the InvenTree server is restarted. This will depend on the particulars of your database installation.","title":"Restart Server"},{"location":"stock/adjust/","text":"Stock Adjustments \u2693 InvenTree provides simple yet powerful management of stock levels. Multiple stock adjustment options are available, and each type of adjustment is automatically tracked to maintain a complete stock history. Move Stock \u2693 Multiple stock items can be moved to a new location in a single operation. Each item is moved to the selected location, and a stock tracking entry is added to the stock item history. Add Stock \u2693 Add parts to a stock item record - for example putting parts back into stock. The in-stock quantity for each selected item is increased by the given amount. Remove Stock \u2693 Remove parts from a stock item record - for example taking parts from stock for use. The in-stock quantity for each selected item is decreased by the given amount. Count Stock \u2693 Count stock items (stocktake) to record the number of items in stock at a given point of time. The quantity for each part is pre-filled with the current quantity based on stock item history.","title":"Adjusting Stock"},{"location":"stock/adjust/#stock-adjustments","text":"InvenTree provides simple yet powerful management of stock levels. Multiple stock adjustment options are available, and each type of adjustment is automatically tracked to maintain a complete stock history.","title":"Stock Adjustments"},{"location":"stock/adjust/#move-stock","text":"Multiple stock items can be moved to a new location in a single operation. Each item is moved to the selected location, and a stock tracking entry is added to the stock item history.","title":"Move Stock"},{"location":"stock/adjust/#add-stock","text":"Add parts to a stock item record - for example putting parts back into stock. The in-stock quantity for each selected item is increased by the given amount.","title":"Add Stock"},{"location":"stock/adjust/#remove-stock","text":"Remove parts from a stock item record - for example taking parts from stock for use. The in-stock quantity for each selected item is decreased by the given amount.","title":"Remove Stock"},{"location":"stock/adjust/#count-stock","text":"Count stock items (stocktake) to record the number of items in stock at a given point of time. The quantity for each part is pre-filled with the current quantity based on stock item history.","title":"Count Stock"},{"location":"stock/stock/","text":"Stock Location \u2693 A stock location represents a physical real-world location where Stock Items are stored. Locations are arranged in a cascading manner and each location may contain multiple sub-locations, or stock, or both. Stock Item \u2693 A Stock Item is an actual instance of a Part item. It represents a physical quantity of the Part in a specific location. Stock Item Details \u2693 The Stock Item detail view shows information regarding the particular stock item: Part - Which Part this stock item is an instance of Location - Where is this stock item located? Quantity - How many items are in stock? Supplier - If this part was purcahsed from a Supplier , which Supplier did it come from? Supplier Part - Link to the particular Supplier Part , if appropriate. Last Updated - Date that the stock quantity was last updated Last Stocktake - Date of most recent stocktake (count) of this item Status - Status of this stock item Stock Tracking \u2693 Every time a Stock Item is adjusted, a Stock Tracking entry is automatically created. This ensures a complete history of the Stock Item is maintained as long as the item is in the system. Each stock tracking historical item records the user who performed the action.","title":"Stock Items"},{"location":"stock/stock/#stock-location","text":"A stock location represents a physical real-world location where Stock Items are stored. Locations are arranged in a cascading manner and each location may contain multiple sub-locations, or stock, or both.","title":"Stock Location"},{"location":"stock/stock/#stock-item","text":"A Stock Item is an actual instance of a Part item. It represents a physical quantity of the Part in a specific location.","title":"Stock Item"},{"location":"stock/stock/#stock-item-details","text":"The Stock Item detail view shows information regarding the particular stock item: Part - Which Part this stock item is an instance of Location - Where is this stock item located? Quantity - How many items are in stock? Supplier - If this part was purcahsed from a Supplier , which Supplier did it come from? Supplier Part - Link to the particular Supplier Part , if appropriate. Last Updated - Date that the stock quantity was last updated Last Stocktake - Date of most recent stocktake (count) of this item Status - Status of this stock item","title":"Stock Item Details"},{"location":"stock/stock/#stock-tracking","text":"Every time a Stock Item is adjusted, a Stock Tracking entry is automatically created. This ensures a complete history of the Stock Item is maintained as long as the item is in the system. Each stock tracking historical item records the user who performed the action.","title":"Stock Tracking"},{"location":"stock/stocktake/","text":"Stocktake \u2693 TODO This section requires further work","title":"Stocktake"},{"location":"stock/stocktake/#stocktake","text":"TODO This section requires further work","title":"Stocktake"},{"location":"stock/test/","text":"Stock Test Result \u2693 Stock items which are associated with a trackable part can have associated test data - this is particularly useful for tracking unit testing / commissioning / acceptance data against a serialized stock item. The master \"Part\" record for the stock item can define multiple test templates , against which test data can be uploaded. Additionally, arbitrary test information can be assigned to the stock item. TODO Include pictures of the Test Results tab Test Result Fields \u2693 Test Name \u2693 The name of the test data is used to associate the test with a test template object. Result \u2693 Boolean pass/fail status of the test. Value \u2693 Optional value uploaded as part of the test data. For example if the test is to record the firmware version of a programmed device, the version number can be added here. Notes \u2693 Optional field available for extra notes. Attachment \u2693 A given test result may require an attached file which contains extra test information. Multiple Test Results \u2693 Multiple results can be uploaded against the same test name. In cases where multiple test results are uploaded, the most recent value is used to determine the pass/fail status of the test. It is useful to keep all test records as a given test might be required to run multiple times, if (for example) it fails the first time and then something must be fixed before running the test again. Reporting \u2693 TODO Include information on the reporting plugin architecture Automated Test Intgration \u2693 The stock item testing framework is especially useful when integrating with an automated acceptance testing framework. Test results can be uploaded using the InvenTree API or the InvenTree Python Interface . Example You design and sell a temperature sensor which needs to be calibrated before it can be sold. An automated calibration tool sets the offset in the device, and uploads a test result to the InvenTree database.","title":"Test Results"},{"location":"stock/test/#stock-test-result","text":"Stock items which are associated with a trackable part can have associated test data - this is particularly useful for tracking unit testing / commissioning / acceptance data against a serialized stock item. The master \"Part\" record for the stock item can define multiple test templates , against which test data can be uploaded. Additionally, arbitrary test information can be assigned to the stock item. TODO Include pictures of the Test Results tab","title":"Stock Test Result"},{"location":"stock/test/#test-result-fields","text":"","title":"Test Result Fields"},{"location":"stock/test/#test-name","text":"The name of the test data is used to associate the test with a test template object.","title":"Test Name"},{"location":"stock/test/#result","text":"Boolean pass/fail status of the test.","title":"Result"},{"location":"stock/test/#value","text":"Optional value uploaded as part of the test data. For example if the test is to record the firmware version of a programmed device, the version number can be added here.","title":"Value"},{"location":"stock/test/#notes","text":"Optional field available for extra notes.","title":"Notes"},{"location":"stock/test/#attachment","text":"A given test result may require an attached file which contains extra test information.","title":"Attachment"},{"location":"stock/test/#multiple-test-results","text":"Multiple results can be uploaded against the same test name. In cases where multiple test results are uploaded, the most recent value is used to determine the pass/fail status of the test. It is useful to keep all test records as a given test might be required to run multiple times, if (for example) it fails the first time and then something must be fixed before running the test again.","title":"Multiple Test Results"},{"location":"stock/test/#reporting","text":"TODO Include information on the reporting plugin architecture","title":"Reporting"},{"location":"stock/test/#automated-test-intgration","text":"The stock item testing framework is especially useful when integrating with an automated acceptance testing framework. Test results can be uploaded using the InvenTree API or the InvenTree Python Interface . Example You design and sell a temperature sensor which needs to be calibrated before it can be sold. An automated calibration tool sets the offset in the device, and uploads a test result to the InvenTree database.","title":"Automated Test Intgration"}]}